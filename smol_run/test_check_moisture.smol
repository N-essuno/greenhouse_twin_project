main
    Int i = 0;
    Plant plant = null;

    AssetModel assetModel = new AssetModel();

    List<Plant> plants = assetModel.getPlants();
    List<Pot> pots = assetModel.getPots();
    

    print("--------------------------------------------------- Get plants moisture");

    i = 0;
    Int plantsLength = plants.length();

    // For each plant, print plant id, ideal moisture and current moisture got from InfluxDB
    while i < plantsLength do
        plant = plants.get(i);
        Double plantMoisture = plant.getPotMoisture();
        print("Plant id: ");
        print(plant.plantId);
        print("idealMoisture: ");
        print(plant.idealMoisture);
        print("moisture: ");
        print(plantMoisture);
        print("----------------------------------------");
        i = i + 1;
    end

    print("--------------------------------------------------- Check plants moisture");

    // List of plants (ids of plants) that need to be watered
    List<PlantToWater> plantsToWater = null;

    // For each plant, check if it needs water. If it does, add it to the list of plants to water
    i = 0;
    PlantToWater plantToWater = null;

    while i < plantsLength do
        plant = plants.get(i);
        Double plantMoisture = plant.getPotMoisture();
        if (plantMoisture < plant.idealMoisture) then
            print("Plant needs water");
            plantToWater = new PlantToWater(plant.plantId);
            plantsToWater = new List(plantToWater, plantsToWater);
        else 
            print("Plant is fine");
        end
        i = i + 1;
    end

    // 
    i = 0;
    Int plantsToWaterLength = plantsToWater.length();
    
    while i < plantsToWaterLength do
        print("Id plant to water: ");
        plantToWater = plantsToWater.get(i);
        print(plantToWater.plantId);
        i = i + 1;
    end

    breakpoint;
end


class Plant(String plantId, Double idealMoisture)
    // Return last ndvi detection for the plant
    Double getNdvi()
        Double ndvi = 0.0;
        List<Double> influxReturn = null;

        influxReturn = access(
            "from(bucket: \"greenhouse_test\")
                |> range(start: -30d)
                |> filter(fn: (r) => r[\"_measurement\"] == \"ast:plant\")
                |> filter(fn: (r) => r[\"_field\"] == \"ndvi\")
                |> filter(fn: (r) => r[\"plant_id\"] == %1)
                |> keep(columns: [\"_value\"])
                |> last()",
        INFLUXDB("config_local.yml"),
        this.plantId);

        ndvi = influxReturn.get(0);
        return ndvi;
    end

    Double getPotMoisture()
        Double moisture = 0.0;
        List<Double> influxReturn = null;

        influxReturn = access(
            "from(bucket: \"greenhouse_test\")
                |> range(start: -30d)
                |> filter(fn: (r) => r[\"_measurement\"] == \"ast:pot\")
                |> filter(fn: (r) => r[\"_field\"] == \"moisture\")
                |> filter(fn: (r) => r[\"plant_id\"] == %1)
                |> keep(columns: [\"_value\"])
                |> last()",
        INFLUXDB("config_local.yml"),
        this.plantId);

        moisture = influxReturn.get(0);
        return moisture;
    end
end

class Pot(String shelfFloor, String groupPosition, String potPosition)

    // Return last moisture detection for the pot
    Double getMoisture()
        Double moisture = 0.0;
        List<Double> influxReturn = null;
        
        influxReturn = access(
            "from(bucket: \"greenhouse_test\")
                |> range(start: -30d)
                |> filter(fn: (r) => r[\"_measurement\"] == \"ast:pot\")
                |> filter(fn: (r) => r[\"_field\"] == \"moisture\")
                |> filter(fn: (r) => r[\"group_position\"] == %1)
                |> filter(fn: (r) => r[\"pot_position\"] == %2)
                |> filter(fn: (r) => r[\"shelf_floor\"] == %3)
                |> keep(columns: [\"_value\"])
                |> last()",
        INFLUXDB("config_local.yml"),
        this.groupPosition,
        this.potPosition,
        this.shelfFloor);

        Int length = influxReturn.length();
        moisture = influxReturn.get(0);
        return moisture;
    end
end

class PlantToWater(Int plantId)
end

/**
* Retrieves data from the asset model and convert it to SMOL objects
*/
class AssetModel()
    // get pot instances from the asset model
    List<Pot> getPots()
        List<Pot> pots = construct("
        PREFIX ast: <http://www.semanticweb.org/gianl/ontologies/2023/1/sirius-greenhouse#>
        SELECT ?shelfFloor ?groupPosition ?potPosition
        WHERE {
            ?pot rdf:type ast:Pot ;
                ast:hasShelfFloor ?shelfFloor ;
                ast:hasGroupPosition ?groupPosition ;
                ast:hasPotPosition ?potPosition .
        }");
        return pots;
        // edit query to get new pots
    end

    // get shelf instances from the asset model
    List<Shelf> getShelves()
        List<Shelf> shelves = construct("
            PREFIX ast: <http://www.semanticweb.org/gianl/ontologies/2023/1/sirius-greenhouse#>
            SELECT ?shelfFloor
            WHERE {
                ?shelf rdf:type ast:Shelf ;
                    ast:hasShelfFloor ?shelfFloor .
            }
        ");
        return shelves;
    end

    // get pump instances from the asset model
    List<Pump> getPumps()
        List<Pump> pumps = construct("
            PREFIX ast: <http://www.semanticweb.org/gianl/ontologies/2023/1/sirius-greenhouse#>
            SELECT ?shelfFloor ?groupPosition
            WHERE {
                ?pump rdf:type ast:Pump ;
                    ast:hasShelfFloor ?shelfFloor ;
                    ast:hasGroupPosition ?groupPosition.
            }
        ");
        return pumps;
    end

    // get plant instances from the asset model
    List<Plant> getPlants()
        List<Plant> plants = construct("
            PREFIX ast: <http://www.semanticweb.org/gianl/ontologies/2023/1/sirius-greenhouse#>
            SELECT ?plantId ?idealMoisture
            WHERE {
                ?plant rdf:type ast:Plant ;
                    ast:hasPlantId ?plantId ;
                    ast:hasIdealMoisture ?idealMoisture .
            }
        ");
        return plants;
    end
end
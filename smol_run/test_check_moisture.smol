main
    Int i = 0;

    // Create test pots
    Pot pot1 = new Pot("1", "left", "left");
    Pot pot2 = new Pot("1", "left", "right");

    // Create test plants and add them to the list of plants 
    List<Plant> plants = null;

    Plant plant1 = new Plant("1", 50.0);
    Plant plant2 = new Plant("2", 50.0);

    plants = new List(plant1, plants);
    plants = new List(plant2, plants);

    

    print("--------------------------------------------------- Get plants moisture");

    i = 0;
    Int plantsLength = plants.length();

    // For each plant, print plant id, ideal moisture and current moisture got from InfluxDB
    while i < plantsLength do
        Plant plant = plants.get(i);
        Double plantMoisture = plant.getPotMoisture();
        print("Plant id: ");
        print(plant.plantId);
        print("idealMoisture: ");
        print(plant.idealMoisture);
        print("moisture: ");
        print(plantMoisture);
        print("----------------------------------------");
        i = i + 1;
    end

    print("--------------------------------------------------- Check plants moisture");

    // List of plants (ids of plants) that need to be watered
    List<Int> plantsToWater = null;

    // For each plant, check if it needs water. If it does, add it to the list of plants to water
    i = 0;
    while i < plantsLength do
        Plant plant = plants.get(i);
        Double plantMoisture = plant.getPotMoisture();
        if (plantMoisture < plant.idealMoisture) then
            print("Plant needs water");
            plantsToWater = new List(plant.plantId, plantsToWater);
        else 
            print("Plant is fine");
        end
        i = i + 1;
    end

    // 
    i = 0;
    Int plantsToWaterLength = plantsToWater.length();
    while i < plantsToWaterLength do
        print("Id plant to water: ");
        Int idPlantToWater = plantsToWater.get(i);
        print(idPlantToWater);
        i = i + 1;
    end

    breakpoint;
end


class Plant(String plantId, Double idealMoisture)
    // Return last ndvi detection for the plant
    Double getNdvi()
        Double ndvi = 0.0;
        List<Double> influxReturn = null;

        influxReturn = access(
            "from(bucket: \"greenhouse_test\")
                |> range(start: -30d)
                |> filter(fn: (r) => r[\"_measurement\"] == \"ast:plant\")
                |> filter(fn: (r) => r[\"_field\"] == \"ndvi\")
                |> filter(fn: (r) => r[\"plant_id\"] == %1)
                |> keep(columns: [\"_value\"])
                |> last()",
        INFLUXDB("config_local.yml"),
        this.plantId);

        ndvi = influxReturn.get(0);
        return ndvi;
    end

    Double getPotMoisture()
        Double moisture = 0.0;
        List<Double> influxReturn = null;

        influxReturn = access(
            "from(bucket: \"greenhouse_test\")
                |> range(start: -30d)
                |> filter(fn: (r) => r[\"_measurement\"] == \"ast:pot\")
                |> filter(fn: (r) => r[\"_field\"] == \"moisture\")
                |> filter(fn: (r) => r[\"plant_id\"] == %1)
                |> keep(columns: [\"_value\"])
                |> last()",
        INFLUXDB("config_local.yml"),
        this.plantId);

        moisture = influxReturn.get(0);
        return moisture;
    end
end

class Pot(String shelfFloor, String groupPosition, String potPosition)

    // Return last moisture detection for the pot
    Double getMoisture()
        Double moisture = 0.0;
        List<Double> influxReturn = null;
        
        influxReturn = access(
            "from(bucket: \"greenhouse_test\")
                |> range(start: -30d)
                |> filter(fn: (r) => r[\"_measurement\"] == \"ast:pot\")
                |> filter(fn: (r) => r[\"_field\"] == \"moisture\")
                |> filter(fn: (r) => r[\"group_position\"] == %1)
                |> filter(fn: (r) => r[\"pot_position\"] == %2)
                |> filter(fn: (r) => r[\"shelf_floor\"] == %3)
                |> keep(columns: [\"_value\"])
                |> last()",
        INFLUXDB("config_local.yml"),
        this.groupPosition,
        this.potPosition,
        this.shelfFloor);

        Int length = influxReturn.length();
        moisture = influxReturn.get(0);
        return moisture;
    end
end